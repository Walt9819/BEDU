title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=180], 180), c(0, y[x<=180], 0), col="red")
pnorm(q = 165, mean = 175, sd = 6)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=165], 165), c(0, y[x<=165], 0), col="yellow")
pnorm(q = 180, mean = 175, sd = 6) - pnorm(q = 165, mean = 175, sd = 6)
pnorm(q = 180, mean = 175, sd = 6) - pnorm(q = 165, mean = 175, sd = 6)
pnorm(q = 180, mean = 175, sd = 6)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(165, x[x>=165 & x<=180], 180), c(0, y[x>=165 & x<=180], 0), col="green")
pnorm(q = 182, mean = 175, sd = 6, lower.tail = FALSE)
pnorm(q = 182, mean = 175, sd = 6, lower.tail = FALSE)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(182, x[x>=182], max(x)), c(0, y[x>=182], 0), col="blue")
dev.off() # Para mostrar solo una gráfica
(b <- qnorm(p = 0.75, mean = 175, sd = 6))
pnorm(b, 175, 6)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
axis(side = 1, at = b, font = 2, padj = 1, lwd = 2)
set.seed(7563) # Para poder reproducir la muestra en el futuro
muestra <- rnorm(n = 1000, mean = 175, sd = 6)
length(muestra); mdf <- as.data.frame(muestra)
tail(mdf)
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.3, # Intensidad del color fill
binwidth = 3) +
geom_density(aes(y = 3*..count..))+
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra normal') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_dark() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean <- 175; sd <- 6
x <- seq(mean-4*sd, mean+4*sd, 0.01)
y <- dnorm(x, mean, sd)
plot(x, y, type = "l", xlab="valores", ylab = "", xaxt = "n", yaxt = "n")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste("Regla Empírica con ", mu == 175, " y ", sigma == 6)))
abline(v=mean, lty = 2, lwd = 2)
for(k in c(-3, -2, -1, 1, 2, 3)) abline(v = mean+k*sd, lty = 2, col = abs(k))
ps <- c(mean - 3*sd, mean - 2*sd, mean - sd, mean, mean + sd, mean + 2*sd, mean + 3*sd)
axis(side = 1, at = ps)
x0 <- NULL
for(i in 1:length(ps)-1) x0 <- c(x0, (ps[i]+ps[i+1])/2)
y0 <- dnorm(x0, mean, sd)*1/3
text(x = x0, y = y0, labels = c("2.35%", "13.5%", "34%", "34%", "13.5%", "2.35%"))
x1 <- (x[1]+ps[1])/2; y1 <- dnorm(mean, mean, sd)*1/2
xf <- (x[length(x)]+ps[length(ps)])/2; yf <- dnorm(mean, mean, sd)*1/2
text(x = c(x1, xf), y = c(y1, yf), labels = c("0.15%", "0.15%"))
segments(x0 = x1, y0 = 0, x1 = x1, y1 = y1,               # Draw one line as in Example 1
col = "cornflowerblue",                               # Color of line
lwd = 5,                                              # Thickness of line
lty = "dotted")
segments(x0 = xf, y0 = 0, x1 = xf, y1 = yf,
col = "cornflowerblue",
lwd = 5,
lty = "dotted")
x <- seq(-4, 4, 0.01) # Algunos valores que puede tomar la v.a. T con 7 gl
y <- dt(x, df = 7) # Valores correspondientes de la densidad t de Student con 7 gl
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
abline(v = 0, lwd=2, lty=2)
pt(q = 1.5, df = 7)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
polygon(c(min(x), x[x<=1.5], 1.5), c(0, y[x<=1.5], 0), col="purple")
pt(q = 2, df = 7, lower.tail = FALSE)
pt(q = 2, df = 7, lower.tail = FALSE)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
polygon(c(2, x[x>=2], max(x)), c(0, y[x>=2], 0), col="orange")
(d <- qt(p = 0.025, df = 7))
(d <- qt(p = 0.025, df = 7))
pt(q = d, df = 7)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
axis(side = 1, at = d, font = 2, padj = 1, lwd = 2)
set.seed(777) # Para poder reproducir la muestra en el futuro
muestra <- rt(n = 1000, df = 7)
length(muestra); mdf <- as.data.frame(muestra)
tail(mdf)
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7, # Intensidad del color fill
binwidth = 0.5) +
geom_density(aes(y = 0.5*..count..))+
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra t de Student') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_light() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
#La probabilidad de observar exactamente 10 éxitos
dbinom(x = 10, size = n, prob = p)
n = 35; p = 0.51;
#La probabilidad de observar exactamente 10 éxitos
dbinom(x = 10, size = n, prob = p)
#La probabilidad de observar 10 o más exitos
pbinom(q = 10, size = n, prob = p, lower.tail = F)
#El cuantil de orden 0.5
qbinom(p = 0.5, size = n, prob = p)
#Genere una muestra aleatoria de tamaño 1000 de esta distribución, construya una
#tabla de frecuencias relativas con los resultados y realice el gráfico de barras
#de los resultados que muestre las frecuencias relativas.
data.binom <- rbinom(1000, size = n, prob = p)
data.binom
relFreq <- table(data.binom)/length(data.binom)
relFreq.binom <- table(data.binom)/length(data.binom)
relFreq.binom <- as.data.frame(table(data.binom)/length(data.binom))
relFreq.binom
ggplot(relFreq.binom) + aes(x = data.binom, y = Freq)
ggplot() + aes(relFreq.binom, x = data.binom, y = Freq)
relFreq.binom$data.binom <- as.numeric(relFreq.binom$data.binom)
relFreq.binom
ggplot(relFreq.binom, aes(x = data.binom, y = Freq)) +
geom_bar (stat="identity", position = "dodge")
#Genere una muestra aleatoria de tamaño 1000 de esta distribución, construya una
#tabla de frecuencias relativas con los resultados y realice el gráfico de barras
#de los resultados que muestre las frecuencias relativas.
set.seed(1234)
data.binom <- rbinom(1000, size = n, prob = p)
relFreq.binom <- as.data.frame(table(data.binom)/length(data.binom))
relFreq.binom$data.binom <- as.numeric(relFreq.binom$data.binom)
ggplot(relFreq.binom, aes(x = data.binom, y = Freq)) +
geom_bar (stat="identity", position = "dodge") +
labs(x = "Muestra", y = "Probabilidad")
#La probabilidad de observar exactamente 10 éxitos
dbinom(x = 10, size = n, prob = p)
#Genere una muestra aleatoria de tamaño 1000 de esta distribución, construya una
#tabla de frecuencias relativas con los resultados y realice el gráfico de barras
#de los resultados que muestre las frecuencias relativas.
set.seed(1234)
data.binom <- rbinom(1000, size = n, prob = p)
ggplot(relFreq.binom, aes(x = data.binom, y = Freq)) +
geom_bar (stat="identity", position = "dodge") +
labs(x = "Muestra", y = "Probabilidad")
##Distribución normal
#Considere una variable aleatoria normal con media 110 y desviación estándar 7. Realice lo siguiente:
mean = 110; sd = 7;
#Encuentre la probabilidad de que la v.a. sea mayor o igual a 140
pnorm(q = 140, mean = mean, sd = sd, lower.tail = F)
#Encuentre el cuantil de orden 0.95
qnorm(p=0.95, mean = mean, sd = sd)
#Grafique la función de densidad de probabilidad
x <- seq(mean-4*sd, mean+4*sd, 0.01)
dim(x)
x
#Grafique la función de densidad de probabilidad
x <- seq(mean-4*sd, mean+4*sd, 1)
#Grafique la función de densidad de probabilidad
x <- seq(mean-4*sd, mean+4*sd, 0.1)
y <- dnorm(x, mean = mean, sd = sd)
ggplot() +  aes(x = x, y = y) +
geom_bar()
ggplot() +  aes(x = x, y = y) +
geom_col()
ggplot() +  aes(x = x, y = y) +
geom_col() + geom_abline(x = mean)
ggplot() +  aes(x = x, y = y) +
geom_col() + geom_abline(data = mean)
ggplot() +  aes(x = x, y = y) +
geom_col() + geom_abline(mean)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == mean, " y ", sigma == sd)))
abline(v = mean, lwd = 2, lty = 2)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == as.character(mean), " y ", sigma == sd)))
abline(v = mean, lwd = 2, lty = 2)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste("mu=",mean, " y ", "sigma=",sd)))
abline(v = mean, lwd = 2, lty = 2)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste("mu=", 110, " y ", "sigma=", 7)))
abline(v = mean, lwd = 2, lty = 2)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste("mu =", 110, " y ", "sigma =", 7)))
abline(v = mean, lwd = 2, lty = 2)
#Genere una muestra aleatoria de tamaño 1000 y realice el histograma de frecuencias relativas para esta muestra
data.norm <- rnorm(1000, mean = mean, sd = sd)
ggplot(mdf, aes(data.norm)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.3, # Intensidad del color fill
binwidth = 3)
ggplot(mdf, aes(data.norm)) +
geom_histogram(fill = 'blue)
ggplot(mdf, aes(data.norm)) +
geom_histogram(fill = 'blue')
ggplot(mdf, aes(data.norm)) +
geom_histogram(fill = 'blue')
ggplot(mdf, aes(data.norm)) +
geom_histogram(fill = 'blue', binwidth = 3)
ggplot(mdf, aes(data.norm)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.3, # Intensidad del color fill
binwidth = 3)
library(ggplot2)
library(ggplot2)
x <- seq(0, 5, 0.02)
plot(x, dexp(x, rate = 2), type = "l", lwd = 2, ylab = "")
title(main = "Función de Densidad Exponencial", ylab = "f(x)",
sub = expression("Parámetro " ~ lambda == 2))
text(x = 3, y = 1.5, labels = expression(f(x)==2*exp(-2*x) ~ " para x "  >= 0))
text(x = 3, y = 1.3, labels = paste("0 en otro caso"))
text(x = 1, y = 1, labels = expression("E(X) = " ~ 1/lambda == 1/2), col = 2)
text(x = 3, y = 0.5, labels = expression("DE(X) = " ~ 1/lambda == 1/2), col = 4)
set.seed(10) # Para reproducir posteriormente la muestra
(m1.4 <- rexp(n = 4, rate = 2))
mean(m1.4)
set.seed(64) # Para reproducir las muestras en el futuro
(m5.3 <- sapply(X = rep(3, 5), FUN = rexp, 2))
(media5.3 <- apply(m5.3, 2, mean))
set.seed(64) # Para reproducir las muestras en el futuro
(m5.3 <- sapply(X = rep(3, 5), FUN = rexp, 2))
(media5.3 <- apply(m5.3, 2, mean))
set.seed(465) # Para reproducir las muestras en el futuro
m1000.7 <- sapply(X = rep(7, 1000), FUN = rexp, 2)
media1000.7 <- apply(m1000.7, 2, mean)
mdf <- as.data.frame(media1000.7)
tail(mdf)
ggplot(mdf, aes(media1000.7)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.7), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.7); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.7); (1/2)/sqrt(7) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(4465) # Para reproducir las muestras en el futuro
m1000.33 <- sapply(X = rep(33, 1000), FUN = rexp, 2)
media1000.33 <- apply(m1000.33, 2, mean)
mdf <- as.data.frame(media1000.33)
tail(mdf)
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.33); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.33); (1/2)/sqrt(33) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(543465) # Para reproducir las muestras en el futuro
m1000.400 <- sapply(X = rep(400, 1000), FUN = rexp, 2)
media1000.400 <- apply(m1000.400, 2, mean)
mdf <- as.data.frame(media1000.400)
tail(mdf)
ggplot(mdf, aes(media1000.400)) +
geom_histogram(colour = 'orange',
fill = 'gray',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.400), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_gray() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.400); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.400); (1/2)/sqrt(400) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(104)
muestra <- rexp(n = 40, rate = 6) # media = 1/6 aprox 0.1667 (media de la población)
tail(as.data.frame(muestra))
plot(muestra)
ggplot(muestra, aes(x=muestra) + geom_bar()
ggplot(muestra, aes(x=muestra)) + geom_bar()
ggplot(muestra, aes(x=muestra)) + geom_bar()
ggplot() + aes(x=muestra) + geom_bar()
ggplot() + geom_bar()
ggplot(muestra) + geom_bar()
ggplot(muestra, aes(muestra)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7)
ggplot(aes(muestra)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7)
ggplot(as.data.frame(muestra), aes(muestra)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7)
z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40))
set.seed(104)
muestra <- rexp(n = 40, rate = 6) # media = 1/6 aprox 0.1667 (media de la población)
tail(as.data.frame(muestra))
z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40))
z0
(z.05 <- qnorm(p = 0.05, lower.tail = FALSE))
(z.05 <- qnorm(p = 0.05, lower.tail = FALSE))
z0 > z.05
(pvalue <- pnorm(z0, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estándar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(z0, x[x>=z0], max(x)), c(0, y[x>=z0], 0), col="red")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
set.seed(174)
muestra <- sample(x = c(1, 0), size = 45, replace = TRUE, prob = c(0.67, 0.33)); 0.67 # media real de la población
tail(as.data.frame(muestra))
# Leemos nuestros datos con la función read.table
setwd("D:/Documentos/BEDU/BEDU/mod2/sesion05/")
# Leemos nuestros datos con la función read.table
setwd("D:/Documentos/BEDU/BEDU/mod2/sesion05/")
url = https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-05/Ejemplo-01/production.txt
download.file(url = url1, destfile = "data/production.txt", mode = "wb")
url1 = https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-05/Ejemplo-01/production.txt
download.file(url = url1, destfile = "data/production.txt", mode = "wb")
url1 = "https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-05/Ejemplo-01/production.txt"
download.file(url = url1, destfile = "data/production.txt", mode = "wb")
production <- read.table("production.txt", header = TRUE)
production <- read.table("data/production.txt", header = TRUE)
attach(production)
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
cor(RunSize, RunTime)
m1 <- lm(RunTime~RunSize)
summary(m1)
m1 <- lm(RunTime~RunSize)
summary(m1)
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
abline(lsfit(RunSize, RunTime)) # Trazamos la recta de regresión estimada
mtext(expression(paste('Modelo de regresión lineal simple:',
' ',
y[i] == beta[0] + beta[1]*x[i] + e[i])),
side = 3, adj=1, font = 2)
text(x = 200, y = 240, expression(paste('Recta de regresión:',
' ',
y[i] == beta[0] + beta[1]*x[i])),
adj = 1, font = 2)
text(x = 350, y = 180, expression(paste('Recta estimada:',
' ',
hat(y)[i] == hat(beta)[0] + hat(beta)[1]*x[i])),
adj = 1, font = 2)
text(x = 350, y = 160, expression(paste('Recta estimada:',
' ',
hat(y)[i] == 149.74770 + 0.25924*x[i])),
adj = 1, font = 2)
points(189, 215, pch=16, col = "red") # Punto muestral
149.74770 + 0.25924 * 189 # Valor y sobre la recta estimada
lines(c(189, 189), c(198.7441, 215), col = "red")
points(173, 166, pch=16, col = "red") # Punto muestral
149.74770 + 0.25924 * 173 # Valor y sobre la recta estimada
lines(c(173, 173), c(166, 194.5962), col = "red")
tval <- qt(1-0.05/2, 18)
tval
dim(production)
tval <- qt(1-0.05/2, 18)
tval
pt(tval, df = 18)
pt(tval, df = 18)
round(confint(m1, level = 0.95), 3)
RunSize0 <- c(50,100,150,200,250,300,350) # Algunos posibles valores de RunSize
(conf <- predict(m1, newdata =
data.frame(RunSize = RunSize0),
interval = "confidence", level = 0.95))
lines(RunSize0, conf[, 2], lty = 2, lwd = 2, col = "green") # límites inferiores
lines(RunSize0, conf[, 3], lty = 2, lwd = 2, col = "green") # límites superiores
(pred <- predict(m1, newdata =
data.frame(RunSize = RunSize0),
interval = "prediction", level = 0.95))
(pred <- predict(m1, newdata =
data.frame(RunSize = RunSize0),
interval = "prediction", level = 0.95)) # here is important
lines(RunSize0, pred[, 2], lty = 2, lwd = 2, col = "blue") # límites inferiores
lines(RunSize0, pred[, 3], lty = 2, lwd = 2, col = "blue") # límites superiores
anova(m1)
anova(m1)
par(mfrow = c(2, 2))
plot(m1)
dev.off()
data <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-05/Reto-01/datoslineal.csv")
data
str(data)
model <- lm(data$y ~ data$x)
summary(model)
plot(RunSize, RunTime, xlab = "Tamaño de ejecución",
ylab = "Tiempo de ejecución", pch = 16)
abline(lsfit(RunSize, RunTime)) # Trazamos la recta de regresión estimada (mínimos cuadrados)
mtext(expression(paste('Modelo de regresión lineal simple:',
' ',
y[i] == beta[0] + beta[1]*x[i] + e[i])),
side = 3, adj=1, font = 2)
summary(model)
plot(data$x, data$x, pch = 16)
abline(lsfit(data$x, data$y)) # Trazamos la recta de regresión estimada (mínimos cuadrados)
#Realice el gráfico de dispersión de los datos
plot(data$x, data$x, pch = 16)
abline(lsfit(data$x, data$y)) # Trazamos la recta de regresión estimada (mínimos cuadrados)
abline(lsfit(data$y, data$x)) # Trazamos la recta de regresión estimada (mínimos cuadrados)
plot(data$x, data$x, pch = 16)
abline(lsfit(data$x, data$y)) # Trazamos la recta de regresión estimada (mínimos cuadrados)
abline(lsfit(data$y, data$x)) # Trazamos la recta de regresión estimada (mínimos cuadrados)
#Realice el gráfico de dispersión de los datos
plot(data$x, data$y, pch = 16)
plot(data$x, data$y, pch = 16)
abline(lsfit(data$y, data$x)) # Trazamos la recta de regresión estimada (mínimos cuadrados)
plot(data$x, data$y, pch = 16)
abline(lsfit(data$x, data$y)) # Trazamos la recta de regresión estimada (mínimos cuadrados)
#Obtenga algunas gráficas de diagnóstico y diga si es razonable suponer para los
#errores aleatoriedad, normalidad y varianza constante.
anova(model)
par(mfrow = c(2, 2))
plot(m1)
par(mfrow = c(2, 2))
plot(model)
nyc <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-05/Ejemplo-02/nyc.csv", header = TRUE)
head(nyc, 2); tail(nyc, 2); dim(nyc)
head(nyc, 2)
attach(nyc)
m1 <- lm(Price ~ Food + Decor + Service + East)
summary(m1)
url1 = "https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-05/Ejemplo-02/nyc.csv"
download.file(url = url1, destfile = "data/nyc.csv", mode = "wb")
nyc <- read.csv("data/nyc.csv", header = TRUE)
summary(m1)
summary(nyc)
m1 <- lm(Price ~ Food + Decor + Service + East)
summary(m1)
m2 <- lm(Price ~ Food + Decor + East)
summary(m2)
mfull <- lm(Price ~ Food + Decor + Service + East +
Food:East + Decor:East + Service:East)
summary(mfull)
anova(m2,mfull)
pairs(~ Food + Decor + Service, data = nyc, gap = 0.4, cex.labels = 1.5)
m1 <- lm(Price ~ Food + Decor + Service + East)
summary(m1)
StanRes1 <- rstandard(m1)
par(mfrow = c(2, 2))
plot(Food, StanRes1, ylab = "Residuales Estandarizados")
plot(Decor, StanRes1, ylab = "Residuales Estandarizados")
plot(Service, StanRes1, ylab = "Residuales Estandarizados")
plot(East, StanRes1, ylab = "Residuales Estandarizados")
dev.off()
plot(m1$fitted.values, Price, xlab = "Valores ajustados", ylab = "Price")
abline(lsfit(m1$fitted.values, Price))
suppressMessages(suppressWarnings(library(dplyr)))
suppressMessages(suppressWarnings(library(e1071)))
suppressMessages(suppressWarnings(library(ggplot2)))
suppressMessages(suppressWarnings(library(ISLR)))
?Default
head(Default)
tail(Default)
dim(Default)
str(Default)
ggplot(Default, aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_grey() + ggtitle("Datos Default")
set.seed(2020)
set.seed(2020)
train = sample(nrow(Default),
round(nrow(Default)/2))
tail(Default[train, ])
ggplot(Default[train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_dark() + ggtitle("Conjunto de entrenamiento")
ggplot(Default[-train, ],
aes(x = balance, y = income, colour = default)) +
geom_point() + facet_wrap('student') +
theme_light() + ggtitle("Conjunto de prueba")
best <- svm(default~.,  data = Default[train,],
kernel = "radial",
cost = 100,
gamma = 1.51
)
best
mc <- table(true = Default[-train, "default"],
pred = predict(best,
newdata = Default[-train,]))
mc
round(sum(diag(mc))/sum(colSums(mc)), 5)
rs <- apply(mc, 1, sum)
r1 <- round(mc[1,]/rs[1], 5)
r2 <- round(mc[2,]/rs[2], 5)
rbind(No=r1, Yes=r2)
fit <- svm(default ~ ., data = Default[train,],
kernel = "radial", cost = 100, gamma = 1.51,
decision.values = TRUE)
fitted <- attributes(predict(fit, Default[-train,],
decision.values = TRUE))$decision.values
fit <- svm(default ~ ., data = Default[train,],
kernel = "radial", cost = 100, gamma = 1.51,
decision.values = TRUE)
fitted <- attributes(predict(fit, Default[-train,],
decision.values = TRUE))$decision.values
eti <- ifelse(fitted < 0, "Yes", "No")
mc <- table(true = Default[-train, "default"],
pred = eti)
mc
round(sum(diag(mc))/sum(colSums(mc)), 5)
rs <- apply(mc, 1, sum)
r1 <- round(mc[1,]/rs[1], 5)
r2 <- round(mc[2,]/rs[2], 5)
rbind(No=r1, Yes=r2)
eti <- ifelse(fitted < 1.002, "Yes", "No")
mc <- table(true = Default[-train, "default"],
pred = eti)
mc
round(sum(diag(mc))/sum(colSums(mc)), 5)
rs <- apply(mc, 1, sum)
r1 <- round(mc[1,]/rs[1], 5)
r2 <- round(mc[2,]/rs[2], 5)
rbind(No=r1, Yes=r2)
